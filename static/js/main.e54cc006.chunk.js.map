{"version":3,"sources":["lib/components/entityImage.js","lib/components/materialImage.js","lib/components/calendarTop.js","lib/components/calendarBottom.js","lib/components/calendarItem.js","lib/components/calendar.js","lib/components/sidebarMenu.js","lib/components/characterTracker.js","lib/components/transformerChanger.js","lib/components/sidebarItem.js","lib/components/codeList.js","lib/components/sidebar.js","lib/components/stateManager.js","App.js","reportWebVitals.js","index.js"],"names":["EntityImage","input","escape","replace","split","join","imageSrc","classNames","entityName","classNameString","Array","isArray","className","src","alt","this","props","createEntityImage","React","Component","MaterialImage","material","highMaterialName","name","convertURISafe","classes","createMaterialURL","calendarTop","createResetInfo","day","config","resetDay","createMaterialImages","type","queryHandler","getQueryHandler","materialNames","matchCategories","materialImages","forEach","materialName","push","genshin","talentmaterialtypes","weaponmaterialtypes","Error","CalendarBottom","createTransformerImage","userConfig","transformerDay","createSpiralAbyssImage","date","spiralAbyssResetDays","calendarDate","getDate","includes","createCharacterImage","dayCharacters2D","map","dayCharacters","concat","characters","trackedCharacters","characterName","character","talentmaterialtype","images","icon","CalendarItem","calendarDays","getDay","Calendar","generateCalendarItems","displayOrder","calendarItems","sidebarMenu","toggleOpen","setState","state","showSubLevel","createMenu","topLevelText","subLevelItems","subLevelContent","onClick","CharacterTracker","toggleCharacterTracking","newConfig","stateManager","getUserConfig","removeFromArray","updateUserConfig","generateCharacterItems","characterNames","outputCharacters","isTracked","array","remove","splice","indexOf","TransformerChanger","createTransformerDayItems","outputDays","isSelected","SidebarItem","text","handler","CodeList","copyToClipboard","targetElement","select","setSelectionRange","document","execCommand","generateCodeItems","codes","outputCodes","code","e","target","value","url","window","open","Sidebar","checkInURL","codesURL","webEventURL","buildsURL","StateManager","defaultState","loadUserConfig","storedUserConfig","JSON","parse","localStorage","getItem","useState","setUserConfigState","useEffect","setItem","stringify","newValue","updatedUserConfig","App","addDays","startDate","days","Date","valueOf","setDate","currentDay","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e54cc006.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class EntityImage extends React.Component {\n\n    convertURISafe (input) {\n        return escape(input.replace(/[\"']/g, '').split(' ').join('_'));\n    }\n\n    createEntityImage (imageSrc, classNames, entityName) {\n        const classNameString = Array.isArray(classNames) ? classNames.join(' ') : classNames;\n\n        return (<div className={classNameString}>\n            <img src={imageSrc} alt={entityName} />\n        </div>);\n    }\n\n    render() {\n        const {imageSrc, classNames, entityName} = this.props;\n\n        return this.createEntityImage(imageSrc, classNames, entityName);\n    }\n}","import EntityImage from \"./entityImage\";\n\nexport default class MaterialImage extends EntityImage {\n    createMaterialURL (material) {\n        let highMaterialName = material['5starname'] || material['4starname'] ;\n\n        if (!highMaterialName) {\n            highMaterialName = material.name;\n        }\n\n        return `img/items/Item_${this.convertURISafe(highMaterialName)}.png`;\n    }\n\n    render () {\n        const { material, classNames } = this.props;\n        let classes = [];\n\n        if (classNames) {\n            classes = Array.isArray(classNames) ? classNames : [classNames];\n        }\n\n        return this.createEntityImage(\n            this.createMaterialURL(material),\n            ['MaterialImage', ...classes],\n            material.name\n        );\n    }\n}","import React from 'react';\nimport MaterialImage from \"./materialImage\";\nimport genshin from \"genshin-db\";\n\nexport default class calendarTop extends React.Component {\n    getQueryHandler (type) {\n        switch (type) {\n            case 'talent':\n                return genshin.talentmaterialtypes;\n            case 'weapon':\n                return genshin.weaponmaterialtypes;\n            default:\n                throw (new Error('getQueryHandler: No type specified'));\n        }\n    }\n\n    createResetInfo = () => {\n        const { day, config : { resetDay } } = this.props;\n\n        if ( day === resetDay) {\n            return (\n                <div className='Reset'>\n                    Incoming Reset Day!\n                </div>\n            );\n        }\n    }\n\n    createMaterialImages = (type, day) => {\n        const queryHandler = this.getQueryHandler(type),\n            materialNames = queryHandler(day, {matchCategories: true});\n        let materialImages = [];\n\n        materialNames.forEach(materialName => {\n            const material = queryHandler(materialName);\n            materialImages.push(<MaterialImage material={material} key={material.name} />)\n        });\n\n        return materialImages;\n    }\n\n    render () {\n        const { day } = this.props;\n\n        return <div className=\"CalendarTop\">\n            <div className=\"day\">{day}</div>\n            <div className=\"container\">\n                { this.createMaterialImages('talent', day) }\n            </div>\n            <div className=\"container\">\n                { this.createMaterialImages('weapon', day) }\n            </div>\n            {this.createResetInfo()}\n        </div>;\n    }\n}","import React from 'react';\nimport genshin from \"genshin-db\";\nimport MaterialImage from \"./materialImage\";\nimport EntityImage from \"./entityImage\";\n\nexport default class CalendarBottom extends React.Component {\n    getQueryHandler (type) {\n        switch (type) {\n            case 'talent':\n                return genshin.talentmaterialtypes;\n            case 'character':\n                return genshin.characters;\n            default:\n                throw (new Error('getQueryHandler: No type specified'));\n        }\n    }\n\n    createTransformerImage = () => {\n        const {day, userConfig} = this.props;\n        if (day === userConfig.transformerDay) {\n            return <MaterialImage material={{name: 'Parametric Transformer'}}\n                                  classNames={'transformer'}\n                    />;\n        }\n    }\n\n    createSpiralAbyssImage = () => {\n        const {date, config : { spiralAbyssResetDays }} = this.props,\n            calendarDate = date.getDate();\n\n        if (spiralAbyssResetDays.includes(calendarDate)) {\n            return <EntityImage imageSrc='img/domains/spiral_abyss.png'\n                                classNames='SpiralAbyss'\n                                entityName='SpiralAbyss'\n                    />;\n        }\n    }\n\n    createCharacterImage = () => {\n        const {day, userConfig} = this.props,\n        dayMaterials = this.getQueryHandler('talent')(day, {matchCategories: true}),\n        dayCharacters2D = dayMaterials.map(\n                                material => this.getQueryHandler('character')(material, {matchCategories: true})\n                            ),\n        dayCharacters = [].concat(...dayCharacters2D);\n        let characters = [];\n\n        userConfig.trackedCharacters.forEach(characterName => {\n            if (dayCharacters.includes(characterName)) {\n                let character = this.getQueryHandler('character')(characterName);\n                let material = this.getQueryHandler('talent')(character.talentmaterialtype);\n\n                characters.push(\n                    <div className='CharacterIcon' key={`calBotCharIcon${characterName}`}>\n                        <img src={character.images.icon} alt={characterName}/>\n                        <MaterialImage material={material} key={material.name} />\n                    </div>\n                    );\n            }\n        });\n\n        return characters;\n    }\n\n    render() {\n        return (\n            <div className=\"CalendarBottom\">\n                {this.createTransformerImage()}\n                {this.createSpiralAbyssImage()}\n                {this.createCharacterImage()}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport CalendarTop from \"./calendarTop\";\nimport CalendarBottom from \"./calendarBottom\";\n\nexport default class CalendarItem extends React.Component {\n    render () {\n        const {date, config, userConfig} = this.props;\n        const day = config.calendarDays[date.getDay()]\n\n\n        return (\n            <div className={['CalendarItem', day].join(' ')}>\n                <div className=\"frame\"> </div>\n                <CalendarTop day={day} config={config} />\n                <CalendarBottom day={day} date={date} config={config} userConfig={userConfig} />\n            </div>\n        );\n    };\n}","import React from 'react';\nimport CalendarItem from \"./calendarItem\";\n\nexport default class Calendar extends React.Component {\n    generateCalendarItems = () => {\n        const {displayOrder, config, userConfig} = this.props;\n\n        let calendarItems = [];\n        displayOrder.forEach(date => {\n            calendarItems.push(<CalendarItem date={date} config={config} userConfig={userConfig} key={date.getDay()}/>)\n        });\n        return calendarItems;\n    }\n\n    render () {\n        return (<div className=\"Calendar\">\n            {this.generateCalendarItems()}\n        </div>);\n    }\n}","import React from 'react';\n\nexport default class sidebarMenu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { 'showSubLevel' : true };\n    }\n\n    toggleOpen = () => {\n        this.setState({'showSubLevel' : !this.state.showSubLevel });\n    }\n\n    createMenu = (topLevelText, subLevelItems) => {\n        const subLevelContent = this.state.showSubLevel && (\n            <div className='subLevel'>\n                { subLevelItems }\n            </div>\n        );\n        return (\n            <>\n                <div className='topLevel' onClick={ this.toggleOpen }>\n                    { topLevelText }\n                </div>\n                { subLevelContent }\n            </>\n        );\n    }\n}","import genshin from \"genshin-db\";\nimport sidebarMenu from \"./sidebarMenu\";\n\nexport default class CharacterTracker extends sidebarMenu {\n    removeFromArray (array, remove) {\n        array.splice(array.indexOf(remove), 1);\n    }\n\n    getQueryHandler (type) {\n        switch (type) {\n            case 'talent':\n                return genshin.talentmaterialtypes;\n            case 'character':\n                return genshin.characters;\n            default:\n                throw (new Error('getQueryHandler: No type specified'));\n        }\n    }\n\n    toggleCharacterTracking = characterName => {\n        const stateManager = this.props.stateManager,\n            { trackedCharacters } = stateManager.getUserConfig();\n        let newConfig;\n\n        if (trackedCharacters.includes(characterName)) {\n            newConfig = [...trackedCharacters];\n            this.removeFromArray(newConfig, characterName);\n        } else {\n            newConfig = [...trackedCharacters, characterName];\n        }\n\n        stateManager.updateUserConfig({trackedCharacters : newConfig});\n    }\n\n    generateCharacterItems = () => {\n        const characterNames = this.getQueryHandler('character')('names', {matchCategories: true});\n        const { trackedCharacters } = this.props.stateManager.getUserConfig();\n        let outputCharacters = [];\n\n        this.removeFromArray(characterNames, 'Aether');\n        this.removeFromArray(characterNames, 'Lumine');\n\n        characterNames.forEach(characterName => {\n            let isTracked = trackedCharacters.includes(characterName);\n\n            outputCharacters.push(\n                <div\n                    className={`characterTracker ${isTracked && 'selected'}`}\n                    onClick={ () => { this.toggleCharacterTracking(characterName); } }\n                    key = {characterName}\n                >\n                    {isTracked && <div className='primogem'/> }\n                    {characterName}\n                </div>\n            );\n        });\n\n        return outputCharacters;\n    }\n\n    render () {\n        return this.createMenu(\n                    'Character Tracker',\n                    this.generateCharacterItems()\n                );\n    }\n}","import sidebarMenu from \"./sidebarMenu\";\n\nexport default class TransformerChanger extends sidebarMenu {\n\n    createTransformerDayItems = () => {\n        const {calendarDays, stateManager} = this.props;\n        let outputDays = [];\n        const {transformerDay} = stateManager.getUserConfig();\n\n        calendarDays.forEach(day => {\n            const isSelected = transformerDay === day;\n            outputDays.push(\n                <div className={`transformerDay ${isSelected && 'selected'}`}\n                     onClick={() => stateManager.updateUserConfig({transformerDay: day})}\n                     key={`transformer${day}`}\n                >\n                    {isSelected && <div className='primogem'/> }\n                    {day}\n                </div>)\n        });\n        return outputDays;\n    }\n\n    render() {\n        return this.createMenu(\n                    'Set Transformer',\n                    this.createTransformerDayItems()\n                );\n    }\n}","import React from 'react';\n\nexport default class SidebarItem extends React.Component {\n\n    render () {\n        let {text, handler} = this.props;\n        return <div className='topLevel'\n                    onClick={handler}\n                >\n                    {text}\n                </div>;\n    }\n}","import React from 'react';\nimport SidebarItem from \"./sidebarItem\";\nimport codes from \"../data/codes.json\";\n\nexport default class CodeList extends React.Component {\n    copyToClipboard = targetElement => {\n        targetElement.select();\n        targetElement.setSelectionRange(0, 99999);\n\n        document.execCommand(\"copy\");\n    }\n\n    generateCodeItems = codes => {\n        let outputCodes = [];\n\n        codes.forEach(code => {\n            outputCodes.push(\n                <input className='code'\n                     key={code}\n                     onClick={ (e) => this.copyToClipboard((e.target)) } value={code}\n                />\n            );\n        })\n\n        return outputCodes;\n    }\n\n    render () {\n        const { url } = this.props;\n\n        return (\n            <>\n                <SidebarItem text={'Codes'} handler={() => {window.open(url);}} />\n                <div className='subLevel'>\n                    {this.generateCodeItems(codes)}\n                </div>\n            </>\n        );\n    }\n}","import React from 'react';\nimport CharacterTracker from \"./characterTracker\";\nimport TransformerChanger from \"./transformerChanger\";\nimport SidebarItem from \"./sidebarItem\";\nimport CodeList from \"./codeList\";\n\nexport default class Sidebar extends React.Component {\n    render() {\n        const {calendarDays, checkInURL, codesURL, webEventURL, buildsURL} = this.props.config;\n        const {stateManager} = this.props;\n\n        return (\n        <div className=\"Sidebar\">\n            <SidebarItem text={'Check In'} handler={() => {window.open(checkInURL);}} />\n            <SidebarItem text={'Web Event'} handler={() => {window.open(webEventURL);}} />\n            <CodeList url={codesURL} />\n\n            <div className='divider'> </div>\n\n            <TransformerChanger stateManager={stateManager} calendarDays={calendarDays} />\n            <CharacterTracker stateManager={stateManager} />\n\n            <div className='divider'> </div>\n\n            <SidebarItem text={'Build'} handler={() => {window.open(buildsURL);}}/>\n            <SidebarItem text={'Calculator'} />\n        </div>\n        );\n    }\n}","import { useState, useEffect } from 'react';\nimport config from '../data/config.json';\n\nexport default function StateManager() {\n    const { defaultState } = config;\n\n    const getUserConfig = () => userConfig;\n\n    const setSavedUserConfig = (config) => {\n        localStorage.setItem('config', JSON.stringify(config));\n    }\n\n    const updateUserConfig = (newValue) => {\n        let updatedUserConfig = {...userConfig, ...newValue};\n        setUserConfigState(updatedUserConfig);\n    }\n\n    const getSavedUserConfig = () => {\n        return JSON.parse(localStorage.getItem('config'));\n    }\n\n    const loadUserConfig = () => {\n        let storedUserConfig = getSavedUserConfig();\n\n        if (storedUserConfig) {\n            return storedUserConfig;\n        } else {\n            return defaultState;\n        }\n    }\n\n    const [userConfig, setUserConfigState] = useState(loadUserConfig());\n\n    useEffect(() => {\n        setSavedUserConfig(userConfig);\n    }, [userConfig]);\n\n    return {\n        getUserConfig,\n        loadUserConfig,\n        updateUserConfig\n    }\n}","import React from 'react';\nimport Calendar from \"./lib/components/calendar\";\nimport Sidebar from \"./lib/components/sidebar\";\nimport StateManager from \"./lib/components/stateManager\";\nimport config from './lib/data/config.json';\n\nimport './lib/css/App.css';\nimport './lib/css/days.css';\n\n\nexport default function App () {\n\n    const addDays = function(startDate, days) {\n        let date = new Date(startDate.valueOf());\n        date.setDate(date.getDate() + days);\n        return date;\n    }\n\n    const currentDay = new Date();\n    let displayOrder = [];\n\n    for (let i = 0; i < 7; ++i) {\n        displayOrder.push(addDays(currentDay,i));\n    }\n\n    const stateManager = StateManager(),\n          userConfig   = stateManager.getUserConfig();\n\n    return (\n        <div className=\"App\">\n            <Calendar displayOrder={displayOrder} userConfig={userConfig} config={config} />\n            <Sidebar userConfig={userConfig} config={config} stateManager={stateManager}/>\n        </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}