{"version":3,"sources":["lib/components/entityImage.js","lib/components/materialImage.js","lib/components/calendarTop.js","lib/components/integrator.js","lib/components/calendarBottom.js","lib/components/calendarItem.js","lib/components/calendar.js","lib/components/sidebarMenu.js","lib/components/tracker.js","lib/components/characterTracker.js","lib/components/transformerChanger.js","lib/components/sidebarItem.js","lib/components/codeList.js","lib/components/weaponTracker.js","lib/components/sidebar.js","lib/components/stateManager.js","App.js","reportWebVitals.js","index.js"],"names":["EntityImage","input","escape","replace","split","join","imageSrc","classNames","entityName","classNameString","Array","isArray","className","src","alt","this","props","createEntityImage","React","Component","MaterialImage","material","highMaterialName","name","convertURISafe","classes","createMaterialURL","calendarTop","createResetInfo","day","config","resetDay","createMaterialImages","type","queryHandler","getQueryHandler","materialNames","matchCategories","materialImages","forEach","materialName","push","genshin","talentmaterialtypes","weaponmaterialtypes","rarity","Error","Integrator","talents","characters","weapons","getEntitiesListByMaterial","getData","getEntityMaterial","entity","talentMaterialTypes","characterTalentMaterialName","costs","lvl2","talentMaterial","includes","weaponmaterialtype","convertQuery","initialQuery","e","query","options","genshinOption","getRarityData","getRarityImage","image","integrationConfig","CalendarBottom","createTransformerImage","userConfig","transformerDay","createSpiralAbyssImage","date","spiralAbyssResetDays","calendarDate","getDate","dayEntities2DArray","integrator","list","map","dayEntities","concat","entities","images","icon","createCharacterImage","dayCharacters2D","dayCharacters","trackedCharacters","characterName","character","talentmaterialtype","CalendarItem","calendarDays","getDay","Calendar","generateCalendarItems","displayOrder","calendarItems","SidebarMenu","toggleOpen","setState","state","showSubLevel","createMenu","topLevelText","subLevelItems","subLevelContent","onClick","Tracker","toggleTracking","trackedEntitiesProperty","newConfig","stateManager","trackedEntities","getUserConfig","newConfigObject","length","removeFromArray","updateUserConfig","generateItems","entityType","displayedRarities","ignoredEntities","output","entityNames","outputEntities","isTracked","array","remove","splice","indexOf","CharacterTracker","TransformerChanger","createTransformerDayItems","outputDays","isSelected","SidebarItem","text","handler","CodeList","copyToClipboard","targetElement","select","setSelectionRange","document","execCommand","generateCodeItems","codes","outputCodes","code","target","value","url","window","open","WeaponTracker","Sidebar","checkInURL","codesURL","webEventURL","buildsURL","wishesURL","ignoredCharacters","StateManager","defaultState","loadUserConfig","storedUserConfig","JSON","parse","localStorage","getItem","useState","setUserConfigState","useEffect","setItem","stringify","prop","newValue","updatedUserConfig","App","addDays","startDate","days","Date","valueOf","setDate","currentDay","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9f9535cb.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class EntityImage extends React.Component {\n\n    convertURISafe (input) {\n        return escape(input.replace(/[\"']/g, '').split(' ').join('_'));\n    }\n\n    createEntityImage (imageSrc, classNames, entityName) {\n        const classNameString = Array.isArray(classNames) ? classNames.join(' ') : classNames;\n\n        return (<div className={classNameString}>\n            <img src={imageSrc} alt={entityName} />\n        </div>);\n    }\n\n    render() {\n        const {imageSrc, classNames, entityName} = this.props;\n\n        return this.createEntityImage(imageSrc, classNames, entityName);\n    }\n}","import EntityImage from \"./entityImage\";\n\nexport default class MaterialImage extends EntityImage {\n    createMaterialURL (material) {\n        let highMaterialName = material['5starname'] || material['4starname'] ;\n\n        if (!highMaterialName) {\n            highMaterialName = material.name;\n        }\n\n        return `img/items/Item_${this.convertURISafe(highMaterialName)}.png`;\n    }\n\n    render () {\n        const { material, classNames } = this.props;\n        let classes = [];\n\n        if (classNames) {\n            classes = Array.isArray(classNames) ? classNames : [classNames];\n        }\n\n        return this.createEntityImage(\n            this.createMaterialURL(material),\n            ['MaterialImage', ...classes],\n            material.name\n        );\n    }\n}","import React from 'react';\nimport MaterialImage from \"./materialImage\";\nimport genshin from \"genshin-db\";\n\nexport default class calendarTop extends React.Component {\n    getQueryHandler (type) {\n        switch (type) {\n            case 'talent':\n                return genshin.talentmaterialtypes;\n            case 'weapon':\n                return genshin.weaponmaterialtypes;\n            case 'rarity':\n                return genshin.rarity;\n            default:\n                throw (new Error('getQueryHandler: No type specified'));\n        }\n    }\n\n    createResetInfo = () => {\n        const { day, config : { resetDay } } = this.props;\n\n        if ( day === resetDay) {\n            return (\n                <div className='Reset'>\n                    Incoming Reset Day!\n                </div>\n            );\n        }\n    }\n\n    createMaterialImages = (type, day) => {\n        const queryHandler = this.getQueryHandler(type),\n            materialNames = queryHandler(day, {matchCategories: true});\n        let materialImages = [];\n\n        materialNames.forEach(materialName => {\n            const material = queryHandler(materialName);\n            materialImages.push(<MaterialImage material={material} key={material.name} />)\n        });\n\n        return materialImages;\n    }\n\n    render () {\n        const { day } = this.props;\n\n        return <div className=\"CalendarTop\">\n            <div className=\"day\">{day}</div>\n            <div className=\"container\">\n                { this.createMaterialImages('talent', day) }\n            </div>\n            <div className=\"container\">\n                { this.createMaterialImages('weapon', day) }\n            </div>\n            {this.createResetInfo()}\n        </div>;\n    }\n}","import integrationConfig from '../data/integrationConfig.json';\nimport genshin from \"genshin-db\";\n\nexport default class Integrator {\n    constructor() {\n        this.config = integrationConfig;\n    }\n\n    getQueryHandler = (type) => {\n        switch (type) {\n            case 'talent':\n                return genshin.talents;\n            case 'talentMaterial':\n                return genshin.talentmaterialtypes;\n            case 'character':\n                return genshin.characters;\n            case 'weapon':\n                return genshin.weapons;\n            case 'weaponMaterial':\n                return genshin.weaponmaterialtypes;\n            case 'rarity':\n                return genshin.rarity;\n            default:\n                throw (new Error('getQueryHandler: Unexpected Type'));\n        }\n    }\n\n    getEntitiesListByMaterial = (type, material) => {\n        switch (type) {\n            case 'character':\n                return this.getData('talent', material, 'all');\n            case 'weapon':\n                return this.getData('weapon', material, 'all');\n            default:\n                throw (new Error('getEntitiesListByMaterial: Unexpected Type'))\n        }\n    }\n\n    getEntityMaterial = (type, entity) => {\n        switch (type) {\n            case 'character':\n                const talentMaterialTypes = this.getData('talentMaterial', 'names', 'all'),\n                      characterTalentCosts = this.getData('talent', entity.name).costs,\n                      characterTalentMaterialName = characterTalentCosts.lvl2[1].name; //extreme hack\n\n                for (const talentMaterial of talentMaterialTypes) {\n                    if (characterTalentMaterialName.includes(talentMaterial)) {\n                        return this.getData('talentMaterial' , talentMaterial);\n                    }\n                }\n                throw (new Error('getEntitiesListByMaterial: Unexpected Talent Material ' + characterTalentMaterialName));\n            case 'weapon':\n                return this.getData('weaponMaterial', entity.weaponmaterialtype);\n            default:\n                throw (new Error('getEntitiesListByMaterial: Unexpected Type'))\n        }\n    }\n\n    convertQuery = (type, initialQuery) => {\n        try {\n            return this.config[type][initialQuery];\n        } catch (e) {\n            return initialQuery;\n        }\n    }\n\n    getData = (type, query, options) => {\n        let genshinOption;\n\n        switch (options) {\n            case 'all':\n                genshinOption = {matchCategories: true};\n                break;\n            default:\n                break;\n        }\n        return this.getQueryHandler(type)(query, genshinOption);\n    }\n\n    getRarityData = (query) =>\n        this.getData(\n            'rarity',\n            this.convertQuery('rarity', query)\n        );\n\n    getRarityImage = query => this.getRarityData(query).image;\n}","import React from 'react';\nimport MaterialImage from \"./materialImage\";\nimport EntityImage from \"./entityImage\";\nimport Integrator from \"./integrator\";\n\nexport default class CalendarBottom extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.integrator = new Integrator();\n    }\n\n    createTransformerImage = () => {\n        const {day, userConfig} = this.props;\n        if (day === userConfig.transformerDay) {\n            return <MaterialImage material={{name: 'Parametric Transformer'}}\n                                  classNames={'transformer'}\n                    />;\n        }\n    }\n\n    createSpiralAbyssImage = () => {\n        const {date, config : { spiralAbyssResetDays }} = this.props,\n            calendarDate = date.getDate();\n\n        if (spiralAbyssResetDays.includes(calendarDate)) {\n            return <EntityImage imageSrc='img/domains/spiral_abyss.png'\n                                classNames='SpiralAbyss'\n                                entityName='SpiralAbyss'\n                    />;\n        }\n    }\n\n    createEntityImage = (type) => {\n        const {day, userConfig} = this.props;\n        const entityDictionary = {\n                'character' :  {\n                    material : 'talentMaterial',\n                    list:      'talent'\n                },\n                'weapon' : {\n                    material : 'weaponMaterial'\n                }\n            },\n            dayMaterials = this.integrator.getData(entityDictionary[type].material, day, 'all'),\n            dayEntities2DArray = dayMaterials.map(\n                material => this.integrator.getEntitiesListByMaterial(type, material)\n            ),\n            dayEntities = [].concat(...dayEntities2DArray);\n        let entities = [];\n\n        if (!userConfig[type]) debugger;\n\n        userConfig[type].forEach(entityName => {\n            if (dayEntities.includes(entityName)) {\n                let entity = this.integrator.getData(type, entityName);\n                let material = this.integrator.getEntityMaterial(type, entity);\n\n                if (!material) debugger;\n\n                entities.push(\n                    <div className={'CharacterIcon'} key={`calBotCharIcon${entityName}`}>\n                        <img src={entity.images.icon} alt={entityName}/>\n                        <MaterialImage material={material} key={material.name} />\n                    </div>\n                );\n            }\n        });\n\n        return entities;\n    }\n\n    createCharacterImage = () => {\n        const {day, userConfig} = this.props,\n        dayMaterials = this.integrator.getData('talentMaterial', day, 'all'),\n        dayCharacters2D = dayMaterials.map(\n                                material => this.integrator.getData('talent', material, 'all')\n                            ),\n        dayCharacters = [].concat(...dayCharacters2D);\n        let characters = [];\n\n        userConfig.trackedCharacters.forEach(characterName => {\n            if (dayCharacters.includes(characterName)) {\n                let character = this.integrator.getData('character', characterName);\n                let material = this.integrator.getData('talentMaterial', character.talentmaterialtype);\n\n                characters.push(\n                    <div className='CharacterIcon' key={`calBotCharIcon${characterName}`}>\n                        <img src={character.images.icon} alt={characterName}/>\n                        <MaterialImage material={material} key={material.name} />\n                    </div>\n                    );\n            }\n        });\n\n        return characters;\n    }\n\n    render() {\n        return (\n            <div className=\"CalendarBottom\">\n                {this.createTransformerImage()}\n                {this.createSpiralAbyssImage()}\n                {this.createEntityImage('character')}\n                {this.createEntityImage('weapon')}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport CalendarTop from \"./calendarTop\";\nimport CalendarBottom from \"./calendarBottom\";\n\nexport default class CalendarItem extends React.Component {\n    render () {\n        const {date, config, userConfig} = this.props;\n        const day = config.calendarDays[date.getDay()]\n\n\n        return (\n            <div className={['CalendarItem', day].join(' ')}>\n                <div className=\"frame\"> </div>\n                <CalendarTop day={day} config={config} />\n                <CalendarBottom day={day} date={date} config={config} userConfig={userConfig} />\n            </div>\n        );\n    };\n}","import React from 'react';\nimport CalendarItem from \"./calendarItem\";\n\nexport default class Calendar extends React.Component {\n    generateCalendarItems = () => {\n        const {displayOrder, config, userConfig} = this.props;\n\n        let calendarItems = [];\n        displayOrder.forEach(date => {\n            calendarItems.push(<CalendarItem date={date} config={config} userConfig={userConfig} key={date.getDay()}/>)\n        });\n        return calendarItems;\n    }\n\n    render () {\n        return (<div className=\"Calendar\">\n            {this.generateCalendarItems()}\n        </div>);\n    }\n}","import React from 'react';\n\nexport default class SidebarMenu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { 'showSubLevel' : true };\n    }\n\n    toggleOpen = () => {\n        this.setState({'showSubLevel' : !this.state.showSubLevel });\n    }\n\n    createMenu = (topLevelText, subLevelItems) => {\n        const subLevelContent = this.state.showSubLevel && (\n            <div className='subLevel'>\n                { subLevelItems }\n            </div>\n        );\n        return (\n            <>\n                <div className='topLevel' onClick={ this.toggleOpen }>\n                    { topLevelText }\n                </div>\n                { subLevelContent }\n            </>\n        );\n    }\n\n    render () {\n        const { topLevelText, subLevelItems } = this.props;\n\n        return this.createMenu(topLevelText, subLevelItems);\n    }\n}","import SidebarMenu from \"./sidebarMenu\";\nimport Integrator from \"./integrator\";\n\nexport default class Tracker extends SidebarMenu {\n    constructor(props) {\n        super(props);\n\n        this.integrator = new Integrator();\n    }\n\n    removeFromArray (array, remove) {\n        array.splice(array.indexOf(remove), 1);\n    }\n\n    toggleTracking = (entityName, trackedEntitiesProperty) => {\n        const stateManager = this.props.stateManager,\n            trackedEntities  = stateManager.getUserConfig(trackedEntitiesProperty);\n        let newConfig,\n            newConfigObject = {};\n\n        if (trackedEntities.length && trackedEntities.includes(entityName)) {\n            newConfig = [...trackedEntities];\n            this.removeFromArray(newConfig, entityName);\n        } else {\n            newConfig = [...trackedEntities, entityName];\n        }\n\n        newConfigObject[trackedEntitiesProperty] = newConfig;\n\n        stateManager.updateUserConfig(newConfigObject);\n    }\n\n    generateItems = (entityType, trackedEntitiesProperty) => {\n        const {stateManager, displayedRarities, ignoredEntities} = this.props;\n        const trackedEntities = stateManager.getUserConfig(trackedEntitiesProperty);\n        let output = [];\n\n        displayedRarities.forEach(rarity => {\n            let entityNames = this.integrator.getData(entityType, rarity, 'all'),\n                outputEntities = [];\n\n            if (entityNames) {\n                entityNames.forEach(entityName => {\n                    if (ignoredEntities && ignoredEntities.includes(entityName)) return;\n                    let isTracked = trackedEntities.includes(entityName);\n\n                    outputEntities.push(\n                        <div\n                            className={`tracker ${isTracked && 'selected'}`}\n                            onClick={() => {\n                                this.toggleTracking(entityName, trackedEntitiesProperty);\n                            }}\n                            key={entityName}\n                        >\n                            {isTracked && <div className='primogem'/>}\n                            {entityName}\n                        </div>\n                    );\n                });\n\n                output.push(\n                    <SidebarMenu\n                        topLevelText = {<img src = { this.integrator.getRarityImage(rarity) }\n                                             alt = { rarity }\n                                        />}\n                        subLevelItems = { outputEntities }\n                        />\n                );\n            }\n        });\n\n        return output;\n    }\n\n    render () {\n        return (<></>);\n    }\n}","import Tracker from \"./tracker\";\n\nexport default class CharacterTracker extends Tracker {\n    render () {\n        return this.createMenu(\n                    'Character Tracker',\n                    this.generateItems(\n                        'character',\n                        'character'\n                    )\n                );\n    }\n}","import SidebarMenu from \"./sidebarMenu\";\n\nexport default class TransformerChanger extends SidebarMenu {\n\n    createTransformerDayItems = () => {\n        const {calendarDays, stateManager} = this.props;\n        let outputDays = [];\n        const {transformerDay} = stateManager.getUserConfig();\n\n        calendarDays.forEach(day => {\n            const isSelected = transformerDay === day;\n            outputDays.push(\n                <div className={`transformerDay ${isSelected && 'selected'}`}\n                     onClick={() => stateManager.updateUserConfig({transformerDay: day})}\n                     key={`transformer${day}`}\n                >\n                    {isSelected && <div className='primogem'/> }\n                    {day}\n                </div>)\n        });\n        return outputDays;\n    }\n\n    render() {\n        return this.createMenu(\n                    'Set Transformer',\n                    this.createTransformerDayItems()\n                );\n    }\n}","import React from 'react';\n\nexport default class SidebarItem extends React.Component {\n\n    render () {\n        let {text, handler} = this.props;\n        return <div className='topLevel'\n                    onClick={handler}\n                >\n                    {text}\n                </div>;\n    }\n}","import React from 'react';\nimport SidebarItem from \"./sidebarItem\";\nimport codes from \"../data/codes.json\";\n\nexport default class CodeList extends React.Component {\n    copyToClipboard = targetElement => {\n        targetElement.select();\n        targetElement.setSelectionRange(0, 99999);\n\n        document.execCommand(\"copy\");\n    }\n\n    generateCodeItems = codes => {\n        let outputCodes = [];\n\n        codes.forEach(code => {\n            outputCodes.push(\n                <input className='code'\n                     key={code}\n                     onClick={ (e) => this.copyToClipboard((e.target)) } value={code}\n                />\n            );\n        })\n\n        return outputCodes;\n    }\n\n    render () {\n        const { url } = this.props;\n\n        return (\n            <>\n                <SidebarItem text={'Codes'} handler={() => {window.open(url);}} />\n                <div className='subLevel'>\n                    {this.generateCodeItems(codes)}\n                </div>\n            </>\n        );\n    }\n}","import Tracker from \"./tracker\";\n\nexport default class WeaponTracker extends Tracker {\n    render () {\n        return this.createMenu(\n                    'Weapon Tracker',\n                    this.generateItems(\n                        'weapon',\n                        'weapon'\n                    )\n                );\n    }\n}","import React from 'react';\nimport CharacterTracker from \"./characterTracker\";\nimport TransformerChanger from \"./transformerChanger\";\nimport SidebarItem from \"./sidebarItem\";\nimport CodeList from \"./codeList\";\nimport WeaponTracker from \"./weaponTracker\";\n\nexport default class Sidebar extends React.Component {\n    render() {\n        const {calendarDays, checkInURL, codesURL, webEventURL, buildsURL, wishesURL, displayedRarities, ignoredCharacters} = this.props.config;\n        const {stateManager} = this.props;\n\n        return (\n        <div className=\"Sidebar\">\n            <SidebarItem text={'Check In'} handler={() => {window.open(checkInURL);}} />\n            <SidebarItem text={'Web Event'} handler={() => {window.open(webEventURL);}} />\n            <CodeList url={codesURL} />\n\n            <div className='divider'> </div>\n\n            <SidebarItem text={'Builds'} handler={() => {window.open(buildsURL);}}/>\n            <SidebarItem text={'Wishes'} handler={() => {window.open(wishesURL);}}/>\n\n            <div className='divider'> </div>\n\n            <CharacterTracker stateManager={stateManager} displayedRarities={displayedRarities} ignoredEntities={ignoredCharacters}/>\n            <WeaponTracker stateManager={stateManager} displayedRarities={displayedRarities}/>\n            <TransformerChanger stateManager={stateManager} calendarDays={calendarDays} />\n\n            <div className='divider'> </div>\n\n            <SidebarItem text={'Calculator'} />\n\n        </div>\n        );\n    }\n}","import { useState, useEffect } from 'react';\nimport config from '../data/config.json';\n\nexport default function StateManager() {\n    const { defaultState } = config;\n\n    const getUserConfig = (prop) => prop ? userConfig[prop] : userConfig;\n\n    const setSavedUserConfig = (config) => {\n        localStorage.setItem('config', JSON.stringify(config));\n    }\n\n    const updateUserConfig = (newValue) => {\n        let updatedUserConfig = {...userConfig, ...newValue};\n        setUserConfigState(updatedUserConfig);\n    }\n\n    const getSavedUserConfig = () => {\n        return JSON.parse(localStorage.getItem('config'));\n    }\n\n    const loadUserConfig = () => {\n        let storedUserConfig = getSavedUserConfig();\n\n        if (storedUserConfig) {\n            return storedUserConfig;\n        } else {\n            return defaultState;\n        }\n    }\n\n    const [userConfig, setUserConfigState] = useState({...defaultState, ...loadUserConfig()});\n\n    useEffect(() => {\n        setSavedUserConfig(userConfig);\n    }, [userConfig]);\n\n    return {\n        getUserConfig,\n        loadUserConfig,\n        updateUserConfig\n    }\n}","import React from 'react';\nimport Calendar from \"./lib/components/calendar\";\nimport Sidebar from \"./lib/components/sidebar\";\nimport StateManager from \"./lib/components/stateManager\";\nimport config from './lib/data/config.json';\n\nimport './lib/css/App.css';\nimport './lib/css/days.css';\n\n\nexport default function App () {\n\n    const addDays = function(startDate, days) {\n        let date = new Date(startDate.valueOf());\n        date.setDate(date.getDate() + days);\n        return date;\n    }\n\n    const currentDay = new Date();\n    let displayOrder = [];\n\n    for (let i = 0; i < 7; ++i) {\n        displayOrder.push(addDays(currentDay,i));\n    }\n\n    const stateManager = StateManager(),\n          userConfig   = stateManager.getUserConfig();\n\n    return (\n        <div className=\"App\">\n            <Calendar displayOrder={displayOrder} userConfig={userConfig} config={config} />\n            <Sidebar userConfig={userConfig} config={config} stateManager={stateManager}/>\n        </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}