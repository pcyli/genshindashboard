{"version":3,"sources":["lib/components/entityImage.js","lib/components/materialImage.js","lib/components/integrator.js","lib/components/materialTooltip.js","lib/components/calendarTop.js","lib/components/calendarBottom.js","lib/components/calendarItem.js","lib/components/calendar.js","lib/components/sidebarMenu.js","lib/components/tracker.js","lib/components/characterTracker.js","lib/components/transformerChanger.js","lib/components/sidebarItem.js","lib/components/codeList.js","lib/components/weaponTracker.js","lib/components/sidebar.js","lib/components/stateManager.js","App.js","reportWebVitals.js","index.js"],"names":["EntityImage","input","escape","replace","split","join","imageSrc","classNames","entityName","dataFor","classNameString","Array","isArray","className","data-tip","data-for","src","alt","this","props","createEntityImage","React","Component","MaterialImage","material","highMaterialName","name","convertURISafe","classes","createMaterialURL","Integrator","config","integrationConfig","type","genshin","talents","talentmaterialtypes","characters","weapons","weaponmaterialtypes","rarity","Error","getMaterialsListByDay","day","getData","getMaterialData","getEntitiesListByMaterial","getEntityAscendMaterial","entity","talentMaterialTypes","characterTalentMaterialName","costs","lvl2","talentMaterial","includes","weaponmaterialtype","convertQuery","initialQuery","e","query","options","genshinOption","matchCategories","getRarityData","getRarityImage","image","MaterialTooltip","targetId","domain","domainofmastery","domainofforgery","imgSrc","id","place","effect","calendarTop","integrator","createResetInfo","resetDay","createMaterialImages","materialNames","materialImages","forEach","materialName","dataId","push","CalendarBottom","createTransformerImage","userConfig","transformerDay","createSpiralAbyssImage","date","spiralAbyssResetDays","calendarDate","getDate","dayEntities2DArray","map","dayEntities","concat","entities","images","icon","createCharacterImage","dayCharacters2D","dayCharacters","trackedCharacters","characterName","character","talentmaterialtype","CalendarItem","calendarDays","getDay","Calendar","generateCalendarItems","displayOrder","calendarItems","SidebarMenu","toggleOpen","setState","state","showSubLevel","createMenu","topLevelText","subLevelItems","subLevelContent","onClick","Tracker","toggleTracking","trackedEntitiesProperty","newConfig","stateManager","trackedEntities","getUserConfig","newConfigObject","length","removeFromArray","updateUserConfig","generateItems","entityType","displayedRarities","ignoredEntities","output","entityNames","outputEntities","isTracked","array","remove","splice","indexOf","CharacterTracker","TransformerChanger","createTransformerDayItems","outputDays","isSelected","SidebarItem","text","handler","CodeList","copyToClipboard","targetElement","select","setSelectionRange","document","execCommand","generateCodeItems","codes","outputCodes","code","target","value","readOnly","url","window","open","WeaponTracker","Sidebar","checkInURL","codesURL","webEventURL","buildsURL","wishesURL","ignoredCharacters","StateManager","defaultState","loadUserConfig","storedUserConfig","JSON","parse","localStorage","getItem","useState","setUserConfigState","useEffect","setItem","stringify","prop","newValue","updatedUserConfig","App","addDays","startDate","days","Date","valueOf","setDate","currentDay","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.fd2d4643.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class EntityImage extends React.Component {\n\n    convertURISafe (input) {\n        return escape(input.replace(/[\"']/g, '').split(' ').join('_'));\n    }\n\n    createEntityImage (imageSrc, classNames, entityName, dataFor) {\n        const classNameString = Array.isArray(classNames) ? classNames.join(' ') : classNames;\n\n        return (\n            <div className={classNameString} data-tip=\"\" data-for={dataFor}>\n                <img src={imageSrc} alt={entityName} />\n            </div>\n        );\n    }\n\n    render() {\n        const {imageSrc, classNames, entityName} = this.props;\n\n        return this.createEntityImage(imageSrc, classNames, entityName);\n    }\n}","import EntityImage from \"./entityImage\";\n\nexport default class MaterialImage extends EntityImage {\n    createMaterialURL (material) {\n        let highMaterialName = material['5starname'] || material['4starname'] ;\n\n        if (!highMaterialName) {\n            highMaterialName = material.name;\n        }\n\n        return `img/items/Item_${this.convertURISafe(highMaterialName)}.png`;\n    }\n\n    render () {\n        const { material, classNames, dataFor } = this.props;\n        let classes = [];\n\n        if (classNames) {\n            classes = Array.isArray(classNames) ? classNames : [classNames];\n        }\n\n        return this.createEntityImage(\n            this.createMaterialURL(material),\n            ['MaterialImage', ...classes],\n            material.name,\n            dataFor\n        );\n    }\n}","import integrationConfig from '../data/integrationConfig.json';\nimport genshin from \"genshin-db\";\n\nexport default class Integrator {\n    config = integrationConfig;\n\n    #getQueryHandler = (type) => {\n        switch (type) {\n            case 'talent':\n                return genshin.talents;\n            case 'talentMaterial':\n                return genshin.talentmaterialtypes;\n            case 'character':\n                return genshin.characters;\n            case 'weapon':\n                return genshin.weapons;\n            case 'weaponMaterial':\n                return genshin.weaponmaterialtypes;\n            case 'rarity':\n                return genshin.rarity;\n            default:\n                throw (new Error('getQueryHandler: Unexpected Type'));\n        }\n    }\n\n    getMaterialsListByDay = (type, day) => {\n        switch (type) {\n            case 'character':\n                return this.getData('talentMaterial', day, 'all');\n            case 'weapon':\n                return this.getData('weaponMaterial', day, 'all');\n            default:\n                throw (new Error('getMaterialsListByDay: Unexpected Type'));\n        }\n    }\n\n    getMaterialData = (type, name) => {\n        switch (type) {\n            case 'character':\n                return this.getData('talentMaterial', name);\n            case 'weapon':\n                return this.getData('weaponMaterial', name);\n            default:\n                throw (new Error('getMaterialData: Unexpected Type'));\n        }\n    }\n\n    getEntitiesListByMaterial = (type, material) => {\n        switch (type) {\n            case 'character':\n                return this.getData('talent', material, 'all');\n            case 'weapon':\n                return this.getData('weapon', material, 'all');\n            default:\n                throw (new Error('getEntitiesListByMaterial: Unexpected Type'));\n        }\n    }\n\n    getEntityAscendMaterial = (type, entity) => {\n        switch (type) {\n            case 'character':\n                const talentMaterialTypes = this.getData('talentMaterial', 'names', 'all'),\n                      characterTalentCosts = this.getData('talent', entity.name).costs,\n                      characterTalentMaterialName = characterTalentCosts.lvl2[1].name; //extreme hack\n\n                for (const talentMaterial of talentMaterialTypes) {\n                    if (characterTalentMaterialName.includes(talentMaterial)) {\n                        return this.getData('talentMaterial', talentMaterial);\n                    }\n                }\n                throw (new Error('getEntitiesListByMaterial: Unexpected Talent Material ' + characterTalentMaterialName));\n            case 'weapon':\n                return this.getData('weaponMaterial', entity.weaponmaterialtype);\n            default:\n                throw (new Error('getEntitiesListByMaterial: Unexpected Type'))\n        }\n    }\n\n    convertQuery = (type, initialQuery) => {\n        try {\n            return this.config[type][initialQuery];\n        } catch (e) {\n            return initialQuery;\n        }\n    }\n\n    getData = (type, query, options) => {\n        let genshinOption;\n\n        switch (options) {\n            case 'all':\n                genshinOption = {matchCategories: true};\n                break;\n            default:\n                break;\n        }\n        return this.#getQueryHandler(type)(query, genshinOption);\n    }\n\n    getRarityData = (query) =>\n        this.getData(\n            'rarity',\n            this.convertQuery('rarity', query)\n        );\n\n    getRarityImage = query => this.getRarityData(query).image;\n}","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\nexport default class MaterialTooltip extends React.Component {\n    render () {\n        const { material, targetId } = this.props,\n            domain = material.domainofmastery || material.domainofforgery,\n            imgSrc = `img/domains/${domain.replace(/ /g, '_')}.png`;\n\n        return (\n                <ReactTooltip id={targetId}\n                    place=\"bottom\" type=\"dark\" effect=\"solid\"\n                >\n                    <div>\n                        <img src={imgSrc} alt={domain} />\n                    </div>\n                    {material.name} Series @ {domain}\n                </ReactTooltip>\n\n        )\n    }\n}","import React from 'react';\nimport MaterialImage from \"./materialImage\";\nimport Integrator from \"./integrator\";\nimport MaterialTooltip from \"./materialTooltip\";\n\nexport default class calendarTop extends React.Component {\n    integrator = new Integrator();\n\n    createResetInfo = () => {\n        const { day, config : { resetDay } } = this.props;\n\n        if ( day === resetDay) {\n            return (\n                <div className='Reset'>\n                    Incoming Reset Day!\n                </div>\n            );\n        }\n    }\n\n    createMaterialImages = (type, day) => {\n        const materialNames = this.integrator.getMaterialsListByDay(type, day);\n        let materialImages = [];\n\n        materialNames.forEach(materialName => {\n            const material = this.integrator.getMaterialData(type, materialName),\n                dataId = `calendarTop_${material.name}`;\n            materialImages.push(\n                <>\n                    <MaterialImage material={material} dataFor={dataId} key={dataId} />\n                    <MaterialTooltip material={material} targetId={dataId} key={`${dataId}_tooltip`} />\n                </>\n            )\n        });\n\n        return materialImages;\n    }\n\n    render () {\n        const { day } = this.props;\n\n        return (\n            <div className=\"CalendarTop\">\n                <div className=\"day\">{day}</div>\n                <div className=\"container\">\n                    { this.createMaterialImages('character', day) }\n                </div>\n                <div className=\"container\">\n                    { this.createMaterialImages('weapon', day) }\n                </div>\n                {this.createResetInfo()}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport MaterialImage from \"./materialImage\";\nimport EntityImage from \"./entityImage\";\nimport Integrator from \"./integrator\";\n\nexport default class CalendarBottom extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.integrator = new Integrator();\n    }\n\n    createTransformerImage = () => {\n        const {day, userConfig} = this.props;\n        if (day === userConfig.transformerDay) {\n            return <MaterialImage material={{name: 'Parametric Transformer'}}\n                                  classNames={'transformer'}\n                    />;\n        }\n    }\n\n    createSpiralAbyssImage = () => {\n        const {date, config : { spiralAbyssResetDays }} = this.props,\n            calendarDate = date.getDate();\n\n        if (spiralAbyssResetDays.includes(calendarDate)) {\n            return <EntityImage imageSrc='img/domains/spiral_abyss.png'\n                                classNames='SpiralAbyss'\n                                entityName='SpiralAbyss'\n                    />;\n        }\n    }\n\n    createEntityImage = (type) => {\n        const {day, userConfig} = this.props;\n        const dayMaterials = this.integrator.getMaterialsListByDay(type, day),\n            dayEntities2DArray = dayMaterials.map(\n                material => this.integrator.getEntitiesListByMaterial(type, material)\n            ),\n            dayEntities = [].concat(...dayEntities2DArray);\n        let entities = [];\n\n        if (!userConfig[type]) debugger;\n\n        userConfig[type].forEach(entityName => {\n            if (dayEntities.includes(entityName)) {\n                let entity = this.integrator.getData(type, entityName);\n                let material = this.integrator.getEntityAscendMaterial(type, entity);\n\n                if (!material) debugger;\n\n                entities.push(\n                    <div className={'CharacterIcon'} key={`calBotCharIcon${entityName}`}>\n                        <img src={entity.images.icon} alt={entityName}/>\n                        <MaterialImage material={material} key={material.name} />\n                    </div>\n                );\n            }\n        });\n\n        return entities;\n    }\n\n    createCharacterImage = () => {\n        const {day, userConfig} = this.props,\n        dayMaterials = this.integrator.getData('talentMaterial', day, 'all'),\n        dayCharacters2D = dayMaterials.map(\n                                material => this.integrator.getData('talent', material, 'all')\n                            ),\n        dayCharacters = [].concat(...dayCharacters2D);\n        let characters = [];\n\n        userConfig.trackedCharacters.forEach(characterName => {\n            if (dayCharacters.includes(characterName)) {\n                let character = this.integrator.getData('character', characterName);\n                let material = this.integrator.getData('talentMaterial', character.talentmaterialtype);\n\n                characters.push(\n                    <div className='CharacterIcon' key={`calBotCharIcon${characterName}`}>\n                        <img src={character.images.icon} alt={characterName}/>\n                        <MaterialImage material={material} key={material.name} />\n                    </div>\n                    );\n            }\n        });\n\n        return characters;\n    }\n\n    render() {\n        return (\n            <div className=\"CalendarBottom\">\n                {this.createTransformerImage()}\n                {this.createSpiralAbyssImage()}\n                {this.createEntityImage('character')}\n                {this.createEntityImage('weapon')}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport CalendarTop from \"./calendarTop\";\nimport CalendarBottom from \"./calendarBottom\";\n\nexport default class CalendarItem extends React.Component {\n    render () {\n        const {date, config, userConfig} = this.props;\n        const day = config.calendarDays[date.getDay()]\n\n        return (\n            <div className={['CalendarItem', day].join(' ')}>\n                <div className=\"frame\"> </div>\n                <CalendarTop day={day} config={config} />\n                <CalendarBottom day={day} date={date} config={config} userConfig={userConfig} />\n            </div>\n        );\n    };\n}","import React from 'react';\nimport CalendarItem from \"./calendarItem\";\n\nexport default class Calendar extends React.Component {\n    generateCalendarItems = () => {\n        const {displayOrder, config, userConfig} = this.props;\n\n        let calendarItems = [];\n        displayOrder.forEach(date => {\n            calendarItems.push(<CalendarItem date={date} config={config} userConfig={userConfig} key={date.getDay()}/>)\n        });\n        return calendarItems;\n    }\n\n    render () {\n        return (<div className=\"Calendar\">\n            {this.generateCalendarItems()}\n        </div>);\n    }\n}","import React from 'react';\n\nexport default class SidebarMenu extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { 'showSubLevel' : true };\n    }\n\n    toggleOpen = () => {\n        this.setState({'showSubLevel' : !this.state.showSubLevel });\n    }\n\n    createMenu = (topLevelText, subLevelItems) => {\n        const subLevelContent = this.state.showSubLevel && (\n            <div className='subLevel'>\n                { subLevelItems }\n            </div>\n        );\n        return (\n            <>\n                <div className='topLevel' onClick={ this.toggleOpen }>\n                    { topLevelText }\n                </div>\n                { subLevelContent }\n            </>\n        );\n    }\n\n    render () {\n        const { topLevelText, subLevelItems } = this.props;\n\n        return this.createMenu(topLevelText, subLevelItems);\n    }\n}","import SidebarMenu from \"./sidebarMenu\";\nimport Integrator from \"./integrator\";\n\nexport default class Tracker extends SidebarMenu {\n    integrator = new Integrator();\n\n    removeFromArray (array, remove) {\n        array.splice(array.indexOf(remove), 1);\n    }\n\n    toggleTracking = (entityName, trackedEntitiesProperty) => {\n        const stateManager = this.props.stateManager,\n            trackedEntities  = stateManager.getUserConfig(trackedEntitiesProperty);\n        let newConfig,\n            newConfigObject = {};\n\n        if (trackedEntities.length && trackedEntities.includes(entityName)) {\n            newConfig = [...trackedEntities];\n            this.removeFromArray(newConfig, entityName);\n        } else {\n            newConfig = [...trackedEntities, entityName];\n        }\n\n        newConfigObject[trackedEntitiesProperty] = newConfig;\n\n        stateManager.updateUserConfig(newConfigObject);\n    }\n\n    generateItems = (entityType, trackedEntitiesProperty) => {\n        const {stateManager, displayedRarities, ignoredEntities} = this.props;\n        const trackedEntities = stateManager.getUserConfig(trackedEntitiesProperty);\n        let output = [];\n\n        displayedRarities.forEach(rarity => {\n            let entityNames = this.integrator.getData(entityType, rarity, 'all'),\n                outputEntities = [];\n\n            if (entityNames) {\n                entityNames.forEach(entityName => {\n                    if (ignoredEntities && ignoredEntities.includes(entityName)) return;\n                    let isTracked = trackedEntities.includes(entityName);\n\n                    outputEntities.push(\n                        <div\n                            className={`tracker ${isTracked && 'selected'}`}\n                            onClick={() => {\n                                this.toggleTracking(entityName, trackedEntitiesProperty);\n                            }}\n                            key={entityName}\n                        >\n                            {isTracked && <div className='primogem'/>}\n                            {entityName}\n                        </div>\n                    );\n                });\n\n                output.push(\n                    <SidebarMenu\n                        topLevelText = {<img src = { this.integrator.getRarityImage(rarity) }\n                                             alt = { rarity }\n                                        />}\n                        subLevelItems = { outputEntities }\n                        />\n                );\n            }\n        });\n\n        return output;\n    }\n\n    render () {\n        return (<></>);\n    }\n}","import Tracker from \"./tracker\";\n\nexport default class CharacterTracker extends Tracker {\n    render () {\n        return this.createMenu(\n                    'Character Tracker',\n                    this.generateItems(\n                        'character',\n                        'character'\n                    )\n                );\n    }\n}","import SidebarMenu from \"./sidebarMenu\";\n\nexport default class TransformerChanger extends SidebarMenu {\n\n    createTransformerDayItems = () => {\n        const {calendarDays, stateManager} = this.props;\n        let outputDays = [];\n        const {transformerDay} = stateManager.getUserConfig();\n\n        calendarDays.forEach(day => {\n            const isSelected = transformerDay === day;\n            outputDays.push(\n                <div className={`transformerDay ${isSelected && 'selected'}`}\n                     onClick={() => stateManager.updateUserConfig({transformerDay: day})}\n                     key={`transformer${day}`}\n                >\n                    {isSelected && <div className='primogem'/> }\n                    {day}\n                </div>)\n        });\n        return outputDays;\n    }\n\n    render() {\n        return this.createMenu(\n                    'Set Transformer',\n                    this.createTransformerDayItems()\n                );\n    }\n}","import React from 'react';\n\nexport default class SidebarItem extends React.Component {\n\n    render () {\n        let {text, handler} = this.props;\n        return <div className='topLevel'\n                    onClick={handler}\n                >\n                    {text}\n                </div>;\n    }\n}","import React from 'react';\nimport SidebarItem from \"./sidebarItem\";\nimport codes from \"../data/codes.json\";\n\nexport default class CodeList extends React.Component {\n    copyToClipboard = targetElement => {\n        targetElement.select();\n        targetElement.setSelectionRange(0, 99999);\n\n        document.execCommand(\"copy\");\n    }\n\n    generateCodeItems = codes => {\n        let outputCodes = [];\n\n        codes.forEach(code => {\n            outputCodes.push(\n                <input className='code'\n                    key={code}\n                    onClick={ (e) => this.copyToClipboard((e.target)) }\n                    value={code}\n                    readOnly\n                />\n            );\n        })\n\n        return outputCodes;\n    }\n\n    render () {\n        const { url } = this.props;\n\n        return (\n            <>\n                <SidebarItem text={'Codes'} handler={() => {window.open(url);}} />\n                <div className='subLevel'>\n                    {this.generateCodeItems(codes)}\n                </div>\n            </>\n        );\n    }\n}","import Tracker from \"./tracker\";\n\nexport default class WeaponTracker extends Tracker {\n    render () {\n        return this.createMenu(\n                    'Weapon Tracker',\n                    this.generateItems(\n                        'weapon',\n                        'weapon'\n                    )\n                );\n    }\n}","import React from 'react';\nimport CharacterTracker from \"./characterTracker\";\nimport TransformerChanger from \"./transformerChanger\";\nimport SidebarItem from \"./sidebarItem\";\nimport CodeList from \"./codeList\";\nimport WeaponTracker from \"./weaponTracker\";\n\nexport default class Sidebar extends React.Component {\n    render() {\n        const {calendarDays, checkInURL, codesURL, webEventURL, buildsURL, wishesURL, displayedRarities, ignoredCharacters} = this.props.config;\n        const {stateManager} = this.props;\n\n        return (\n        <div className=\"Sidebar\">\n            <SidebarItem text={'Check In'} handler={() => {window.open(checkInURL);}} />\n            <SidebarItem text={'Web Event'} handler={() => {window.open(webEventURL);}} />\n            <CodeList url={codesURL} />\n\n            <div className='divider'> </div>\n\n            <SidebarItem text={'Builds'} handler={() => {window.open(buildsURL);}}/>\n            <SidebarItem text={'Wishes'} handler={() => {window.open(wishesURL);}}/>\n\n            <div className='divider'> </div>\n\n            <CharacterTracker stateManager={stateManager} displayedRarities={displayedRarities} ignoredEntities={ignoredCharacters}/>\n            <WeaponTracker stateManager={stateManager} displayedRarities={displayedRarities}/>\n            <TransformerChanger stateManager={stateManager} calendarDays={calendarDays} />\n\n            <div className='divider'> </div>\n\n            <SidebarItem text={'Calculator'} />\n\n        </div>\n        );\n    }\n}","import { useState, useEffect } from 'react';\nimport config from '../data/config.json';\n\nexport default function StateManager() {\n    const { defaultState } = config;\n\n    const getUserConfig = (prop) => prop ? userConfig[prop] : userConfig;\n\n    const setSavedUserConfig = (config) => {\n        localStorage.setItem('config', JSON.stringify(config));\n    }\n\n    const updateUserConfig = (newValue) => {\n        let updatedUserConfig = {...userConfig, ...newValue};\n        setUserConfigState(updatedUserConfig);\n    }\n\n    const getSavedUserConfig = () => {\n        return JSON.parse(localStorage.getItem('config'));\n    }\n\n    const loadUserConfig = () => {\n        let storedUserConfig = getSavedUserConfig();\n\n        if (storedUserConfig) {\n            return storedUserConfig;\n        } else {\n            return defaultState;\n        }\n    }\n\n    const [userConfig, setUserConfigState] = useState({...defaultState, ...loadUserConfig()});\n\n    useEffect(() => {\n        setSavedUserConfig(userConfig);\n    }, [userConfig]);\n\n    return {\n        getUserConfig,\n        loadUserConfig,\n        updateUserConfig\n    }\n}","import React from 'react';\nimport Calendar from \"./lib/components/calendar\";\nimport Sidebar from \"./lib/components/sidebar\";\nimport StateManager from \"./lib/components/stateManager\";\nimport config from './lib/data/config.json';\n\nimport './lib/css/App.css';\nimport './lib/css/days.css';\n\n\nexport default function App () {\n\n    const addDays = function(startDate, days) {\n        let date = new Date(startDate.valueOf());\n        date.setDate(date.getDate() + days);\n        return date;\n    }\n\n    const currentDay = new Date();\n    let displayOrder = [];\n\n    for (let i = 0; i < 7; ++i) {\n        displayOrder.push(addDays(currentDay,i));\n    }\n\n    const stateManager = StateManager(),\n          userConfig   = stateManager.getUserConfig();\n\n    return (\n        <div className=\"App\">\n            <Calendar displayOrder={displayOrder} userConfig={userConfig} config={config} />\n            <Sidebar userConfig={userConfig} config={config} stateManager={stateManager}/>\n        </div>\n    );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}